######################
# Python Interpolation
######################

global !p

def get_args(argslist):
	args_names = [arg.split('=')[0].strip() for arg in argslist.split(',') if arg]
	explicit_args_names = [arg for arg in args_names if arg != 'self']
	return explicit_args_names

def write_init_body(args, snip):
	for arg in args:
		assignment_line = "self.{} = {}".format(arg,arg)
		snip += assignment_line

endglobal

snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python
# encoding: utf-8
$0
endsnippet

snippet ifmain "ifmain" b
if __name__ == '__main__':
	$0
endsnippet

snippet cl "python 3 class"
class ${1:name}:
	$0
endsnippet

snippet class "python 3 class"
class ${1:name}:
    $0
endsnippet

snippet cle "class name():"
class ${1:name}(${2:object}):
	$0
endsnippet

snippet init "__init__()"
def __init__(self$1):
	$0`!p
snip.rv = ""
snip >> 1
args = get_args(t[1])
write_init_body(args,snip)
`
endsnippet

snippet def "method defn"
def ${1:method}($2):
	$0
endsnippet

snippet defa "annotated function defn"
@$1
def ${2:method_name}($3):
    $0
endsnippet

snippet defs "method defn"
def ${1:method}(self$2):
	$0
endsnippet

snippet defsa "annotated method defn"
@$1
def ${2:method_name}(self$3):
    $0
endsnippet

snippet deft "test method" !
def test_$1(self):
	$0
endsnippet

snippet def- "__meth__()"
def __${1:method}__(self$2):
	$0
endsnippet

snippet def_ "__meth__()"
def __${1:method}__(self$2):
	$0
endsnippet

snippet defc "class method"
@classmethod
def ${1:meth_name}(cls$2):
	$0
endsnippet

snippet def@ "decorated function"
@${1:decorator}
def ${2:name}($3):
    $0
endsnippet

snippet defs@ "decorated method"
@${1:decorator}
def ${2:name}(self$3):
    $0
endsnippet

snippet prop "property decorator"
@property
def ${1:name}(self$2):
    $0
endsnippet

snippet props "property setter"
@${1:name}.setter
def $1(self, value):
    $0
endsnippet

snippet try "try except" !
try:
	$1
except $2:
	$0
endsnippet

snippet : " dict key:value" !iw
'${1:key}' : ${0:value}
endsnippet

snippet , "here_doc string " !iw
"""${0}
endsnippet

snippet if "if" !
if ${1:condition}:
	$0
endsnippet

snippet ef "elif" !
elif ${1:condition}:
    $0
endsnippet

snippet ife "if else" !
if ${1:condition}:
	${2}
else:
	$0
endsnippet

snippet ifele "if elif else" !
if ${1:condition}:
    $2
elif ${3:condition}:
	$4
else:
	$0
endsnippet

snippet ae "assertEquals" !iw
self.assertEquals(${1:actual}, ${2:expected})
endsnippet

snippet ac "assertContains" !
self.assertContains(${1:actual}, ${2:expected})
endsnippet

snippet ai "asssertIn"
self.assertIn(${1:search_text}, ${2:container})
endsnippet

snippet aqse "assertQuerysetEquals" !
self.assertQuerysetEqual(${1:actual}, ${2:expected})
endsnippet

snippet at "assertTrue" !
self.assertTrue(${1:actual})
endsnippet

snippet classt "TestCase class" !
class ${1:something}Tests(TestCase):
	$0
endsnippet

snippet lam "lamba" 
lambda $1: $0
endsnippet

snippet sq "The Sequence or Collection protocol"
def __len__(self):
    ${1: return len(self._mylist)}

def __getitem__(self, index):
	${2: return self._mylist[index]}
endsnippet
